#!/usr/bin/env python3
"""
shape_color_detector.py
Usage:
    python shape_color_detector.py
    (it will automatically use 'test.png' in the same folder)
"""

import cv2
import numpy as np
import os

# ---------- HSV color ranges ----------
COLOR_RANGES = {
    'red': [((0, 70, 50), (10, 255, 255)), ((170, 70, 50), (179, 255, 255))],
    'yellow': [((15, 50, 50), (35, 255, 255))],
    'green': [((36, 50, 50), (85, 255, 255))],
    'blue': [((86, 50, 50), (125, 255, 255))],
}

# ---------- Contour Detection ----------
def get_contours(bgr, min_area=200):
    gray = cv2.cvtColor(bgr, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5,5), 0)
    edges = cv2.Canny(blur, 50, 150)
    kernel = np.ones((3,3), np.uint8)
    edges = cv2.dilate(edges, kernel, iterations=1)
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    return [c for c in contours if cv2.contourArea(c) >= min_area]

# ---------- Color Detection ----------
def detect_color_by_mask(bgr_image, contour, hsv_image=None, min_frac=0.12):
    if hsv_image is None:
        hsv_image = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2HSV)
    contour_mask = np.zeros(bgr_image.shape[:2], dtype=np.uint8)
    cv2.drawContours(contour_mask, [contour], -1, 255, -1)
    area = cv2.countNonZero(contour_mask)
    if area == 0:
        return "Unknown"
    best_color, best_frac = "Unknown", 0.0
    for color_name, ranges in COLOR_RANGES.items():
        combined_mask = np.zeros(bgr_image.shape[:2], dtype=np.uint8)
        for (lower, upper) in ranges:
            lower = np.array(lower, dtype=np.uint8)
            upper = np.array(upper, dtype=np.uint8)
            mask = cv2.inRange(hsv_image, lower, upper)
            combined_mask = cv2.bitwise_or(combined_mask, mask)
        masked = cv2.bitwise_and(combined_mask, combined_mask, mask=contour_mask)
        frac = cv2.countNonZero(masked) / float(area)
        if frac > best_frac:
            best_frac, best_color = frac, color_name
    return best_color

# ---------- Shape Classification ----------
def classify_shape(contour):
    peri = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.02 * peri, True)
    v = len(approx)
    if v == 3:
        return "Triangle", approx
    elif v == 4:
        x, y, w, h = cv2.boundingRect(approx)
        return ("Square" if 0.95 <= (w/h) <= 1.05 else "Rectangle"), approx
    elif v > 6:
        return "Circle", approx
    else:
        return f"{v}-sided", approx

# ---------- Annotation ----------
def annotate_image(bgr_image, contours):
    out = bgr_image.copy()
    hsv = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2HSV)
    for cnt in contours:
        shape, approx = classify_shape(cnt)
        color = detect_color_by_mask(bgr_image, cnt, hsv_image=hsv, min_frac=0.12)
        cv2.drawContours(out, [approx], -1, (0,0,0), 2)
        x, y, w, h = cv2.boundingRect(approx)
        label = f"{color.capitalize()} {shape}"
        cv2.putText(out, label, (x, y - 10 if y-10>10 else y + h + 20),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,0,0), 2)
    return out

# ---------- Main ----------
if __name__ == "__main__":
    input_path = "test.jpg"   # default image name
    output_path = "output.jpg"
     
    if not os.path.exists(input_path):
        raise FileNotFoundError(f"Input image '{input_path}' not found in the current folder.")
    
    img = cv2.imread(input_path)
    contours = get_contours(img, min_area=150)
    result = annotate_image(img, contours)
    cv2.imwrite(output_path, result)
    print(f"âœ… Shapes detected and saved to {output_path}")
